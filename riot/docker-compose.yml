version: "3"
volumes:
  kafka-0:
    driver: local
services:
  kafka:
    hostname: kafka
    container_name: kafka
    image: 'bitnami/kafka:3.3.1'
    ports:
      - '9092:9092'
      - '9099:9099'
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_KRAFT_CLUSTER_ID=lbX5g8wuS22UON89iYM65w
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=EXTERNAL://0.0.0.0:9092,CLIENT://:9099,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,CLIENT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=EXTERNAL://kafka:9092,CLIENT://127.0.0.1:9099
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    volumes:
      - kafka-0:/bitnami/kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:7.1.0
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
    depends_on:
      - kafka
      
  kafka-connect:
    container_name: kafka-connect
    image: confluentinc/cp-kafka-connect:5.5.0
    depends_on:
      - kafka
      - schema-registry
    ports:
      - '8083:8083'
    environment:
      # TZ: ${TZ_SET}
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.11.0
        /etc/confluent/docker/run
  
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_CONFIG_DIR: /etc/ksql
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    # volumes:
    #   - ./ksql-config:/etc/ksql

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.29.0
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
  
  kafka-ui:
    image: obsidiandynamics/kafdrop:latest
    ports:
      - '9000:9000'
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - SERVER_SERVLET_CONTEXTPATH=/

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: rsuser
      POSTGRES_PASSWORD: S3cret
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
#      - postgres-db-volume:/var/lib/postgresql/data
       - ~/apps/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "rsuser"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

#  mongo:
#    image: mongo:latest
#    container_name: mongo
#    environment:
#        - MONGO_INITDB_ROOT_USERNAME=rsuser
#        - MONGO_INITDB_ROOT_PASSWORD=S3cret
#    restart: unless-stopped
#    ports:
#      - "27017:27017"
#    volumes:
#      - ./mongodb/db:/data/db
#
#  mongo-express:
#    image: mongo-express
#    container_name: mongo-express
#    environment:
#      - ME_CONFIG_MONGODB_ADMINUSERNAME=rsuser
#      - ME_CONFIG_MONGODB_ADMINPASSWORD=S3cret
#      - ME_CONFIG_MONGODB_URL=mongodb://rsuser:S3cret@mongo:27017/?authSource=admin
#      - ME_CONFIG_BASICAUTH_USERNAME=dal
#      - ME_CONFIG_BASICAUTH_PASSWORD=dal
#    links:
#      - mongo
#    restart: unless-stopped
#    ports:
#      - "8080:8081"